nelmio_api_doc:
    documentation:
        info:
            title: BileMo Catalog-API
            description: Built for you our lovely customers/partners, it enable you to access our product catalog!
            version: 1.0.0

        servers:
            - url: https://bilemo-catalog-api.herokuapp.com/
              description: Main server.
            - url: https://bilemo.wip/
              description: Alternative server.

        components:
            securitySchemes:
                Bearer:
                    type: http
                    scheme: bearer
                    bearerFormat: JWT

            schemas:
                createUsers:
                    type: object
                    properties:
                        email:
                            type: string
                            example: user@some.where
                        password:
                            type: string
                            example: hash password string
                        roles:
                            type: array
                            items:
                                type: string
                            example: [ "ROLE_CUSTOMER_USER" ]
                        customer:
                            type: object
                            properties:
                                id:
                                    type: integer
                                    format: int64
                                    example: 1
                        slug:
                            type: string
                            example: user name (lowercase)

                listUsers:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 1
                        email:
                            type: string
                            example: user@some.where
                        created_at:
                            type: string
                            example: "2021-12-01 21:27:00"

                listProducts:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 1
                        name:
                            type: string
                            example: Product name
                        price:
                            type: float
                            example: 1234
                        brand:
                            type: string
                            example: Product brand
                        slug:
                            type: string
                            example: Product slug

                login:
                    type: object
                    properties:
                        eamil:
                            type: string
                            example: user@some.where
                        password:
                            type: string
                            example: user_password

                picture:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 1
                        picture_url:
                            type: string
                            example: https://www.w3schools.com/images/w3schools_logo_500_04AA6D.png
                        created_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        updated_at:
                            type: string
                            example: "2021-12-01 21:27:00"

                token:
                    type: object
                    properties:
                        token:
                            type: string
                            example: long string

                showUser:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 14
                        email:
                            type: string
                            example: user@some.where
                        customer:
                            allOf:
                                - $ref: '#/components/schemas/customer'
                        created_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        updated_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        slug:
                            type: string
                            example: user name (lowercase)

                showProduct:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 14
                        name:
                            type: string
                            example: Product name
                        price:
                            type: float
                            example: 1234
                        description:
                            type: string
                            example: Product description
                        pictures:
                            allOf:
                                - $ref: '#/components/schemas/picture'
                        brand:
                            type: string
                            example: Product brand
                        created_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        updated_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        slug:
                            type: string
                            example: Product slug

                customer:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int64
                            example: 6
                        full_name:
                            type: string
                            example: Customer name
                        customer_type:
                            type: string
                            example: Customer type
                        address:
                            type: string
                            example: Road numbet + road name
                        zip_code:
                            type: integer
                            format: int64
                            example: 12345 (min length is 3)
                        country:
                            type: string
                            example: Customer country
                        city:
                            type: string
                            example: Customer city
                        email:
                            type: string
                            example: customer.name@some.where
                        contact:
                            type: string
                            example: +3394689348300
                        created_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        updated_at:
                            type: string
                            example: "2021-12-01 21:27:00"
                        slug:
                            type: string
                            example: customer name (lowercase)

                Error:
                    type: object
                    properties:
                        code:
                            type: integer
                            format: int64
                            example: 400...500
                        error:
                            type: string
                            example: Error message

        security:
            - Bearer: [ ]

        tags:
            - name: Documentation
              description: All information about the use of the API
            - name: Users
              description: Everything about Users
            - name: Authentication
              description: Authentication By token. The token will be required for all requests.
            - name: Products
              description: Everything about our product catalog.

        paths:
            /api/doc.json:
                get:
                    tags:
                        - Documentation
                    summary: Return the documentation in JSON format.
                    description: Return the documentation in JSON format.
                    responses:
                        '200':
                            description: Ok! Return a JSON array of users list.

            /api/login_check:
                post:
                    tags:
                        - Authentication
                    summary: Authenticate a user.
                    description: These request generate a token for a user that will be use for all request.
                    requestBody:
                        description: Description of required parameters.
                        required: true
                        content:
                            application/json:
                                schema:
                                    $ref: '#/components/schemas/login'
                    responses:
                        '201':
                            description: Ok! Return a token.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/token'
                        '401':
                            description: Authentication problem! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
            /api/users:
                get:
                    tags:
                        - Users
                    summary: Returns a list of users.
                    description: These request lists general information about users with their relative customer. The defaut pagination is one user per page.
                    parameters:
                        - in: query
                          name: page
                          schema:
                              type: integer
                          description: The current page of the paginated users list.
                        - in: query
                          name: limit
                          schema:
                              type: integer
                          description: The numbers of users to return per page.
                    responses:
                        '200':
                            description: Ok! Return a JSON array of users list.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/listUsers'
                        '404':
                            description: Not found! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                post:
                    tags:
                        - Users
                    summary: Create new user.
                    description: These request enable the creation of users with appropriate customer.
                    requestBody:
                        description: Description of required parameters.
                        required: true
                        content:
                            application/json:
                                schema:
                                    $ref: '#/components/schemas/createUsers'
                    responses:
                        '201':
                            description: Ok! Return the created user in JSON format.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/showUser'
                        '400':
                            description: Bad request! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'

            /api/users/{id}:
                get:
                    tags:
                        - Users
                    summary: Gets a user by ID.
                    description: A detailed description of the user.
                    parameters:
                        - name: id
                          in: path
                          description: User ID
                          required: true
                          schema:
                              type: integer
                              format: int64
                              example: 7
                    responses:
                        '200':
                            description: Ok! Return a detailed description of the user in JSON format.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/showUser'

                        '404':
                            description: User not found! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                delete:
                    tags:
                        - Users
                    summary: Delete a user by ID.
                    description: Return an empty body.
                    parameters:
                        - name: id
                          in: path
                          description: User ID
                          required: true
                          schema:
                              type: integer
                              format: int64
                              example: 24
                    responses:
                        '204':
                            description: Ok No content! The user is successfully deleted.

                        '404':
                            description: User not found! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
            /api/products:
                get:
                    tags:
                        - Products
                    summary: Returns a list of products.
                    description: These request lists general information about products. The defaut pagination is one product per page.
                    parameters:
                        - in: query
                          name: page
                          schema:
                              type: integer
                          description: The current page of the paginated products list.
                        - in: query
                          name: limit
                          schema:
                              type: integer
                          description: The numbers of products to return per page.
                    responses:
                        '200':
                            description: Ok! Return a JSON array of products list.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/listProducts'
                        '404':
                            description: Not found! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'

            /api/products/{id}:
                get:
                    tags:
                        - Products
                    summary: Gets a product by ID.
                    description: A detailed description of the product.
                    parameters:
                        - name: id
                          in: path
                          description: Product ID
                          required: true
                          schema:
                              type: integer
                              format: int64
                              example: 7
                    responses:
                        '200':
                            description: Ok! Return a detailed description of the product in JSON format.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/showProduct'

                        '404':
                            description: Product not found! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'
                        '401':
                            description: Unauthorized! Return a JSON array of code and error.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Error'



    areas: # to filter documented areas
        path_patterns:
            - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
